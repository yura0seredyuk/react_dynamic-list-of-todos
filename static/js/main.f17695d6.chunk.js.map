{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api/api.js","App.jsx","index.js"],"names":["TodoList","state","selectQuery","inputQuery","handleChange","event","target","value","name","setState","items","this","filter","item","completed","title","toLowerCase","includes","props","todos","selectUser","userId","visibleTodos","filterTodos","className","placeholder","onChange","map","option","key","todo","id","classNames","type","checked","readOnly","onClick","React","Component","defaultProps","CurrentUser","user","clearUser","email","phone","style","backgroundColor","request","url","options","fetch","then","response","ok","Error","status","statusText","json","App","users","selectedUserId","handleUserSelection","handleClearUser","findSelectedUser","find","a","Promise","all","result","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f17695d6.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport class TodoList extends React.Component {\n  state = {\n    selectQuery: '',\n    inputQuery: '',\n  }\n\n  handleChange = (event) => {\n    const { value, name } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  filterTodos(items) {\n    const { selectQuery, inputQuery } = this.state;\n\n    switch (selectQuery) {\n      case 'active':\n        return items.filter(item => !item.completed);\n      case 'completed':\n        return items.filter(item => item.completed);\n      default:\n        return items.filter(item => (\n          item.title.toLowerCase().includes(inputQuery)\n        ));\n    }\n  }\n\n  render() {\n    const { todos, selectUser, userId } = this.props;\n    const { selectQuery, inputQuery } = this.state;\n    const options = ['all', 'active', 'completed'];\n\n    const visibleTodos = this.filterTodos(todos);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <input\n            name=\"inputQuery\"\n            value={inputQuery}\n            placeholder=\"Search by title\"\n            onChange={this.handleChange}\n          />\n\n          <select\n            name=\"selectQuery\"\n            value={selectQuery}\n            onChange={this.handleChange}\n          >\n            {options.map(option => (\n              <option key={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames('TodoList__user-button', 'button', {\n                    'TodoList__user-button--selected': todo.userId === userId,\n                  })}\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  {`User#${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool,\n    }),\n  ),\n  userId: PropTypes.number,\n  selectUser: PropTypes.func.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: [],\n  userId: 0,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\n\nexport const CurrentUser = ({ user, clearUser }) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\">\n      <span>{`Selected user: ${user.id}`}</span>\n    </h2>\n    <h3 className=\"CurrentUser__name\">{user.name}</h3>\n    <p className=\"CurrentUser__email\">{user.email}</p>\n    <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n    <button\n      type=\"button\"\n      onClick={clearUser}\n      className=\"CurrentUser__clear button\"\n      style={{ backgroundColor: 'red' }}\n    >\n      Clear User Info\n    </button>\n  </div>\n);\n\nCurrentUser.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }),\n  clearUser: PropTypes.func.isRequired,\n};\n\nCurrentUser.defaultProps = {\n  user: null,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com/';\n\nconst request = (url, options) => (\n  fetch(BASE_URL + url, options)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n);\n\nexport function getTodos() {\n  return (\n    request('todos')\n      .then(result => result.data)\n      .then(data => data.filter(todo => todo.title))\n  );\n}\n\nexport function getUsers() {\n  return (\n    request('users')\n      .then(result => result.data)\n  );\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos, getUsers } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    users: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const [users, todos] = await Promise.all([\n      getUsers('users'),\n      getTodos('todos'),\n    ]);\n\n    this.setState({\n      users,\n      todos: todos.filter(todo => (\n        todo.title\n      )),\n    });\n  }\n\n  handleUserSelection = (userId) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  handleClearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  findSelectedUser = () => {\n    const { users, selectedUserId } = this.state;\n\n    return users.find(user => user.id === selectedUserId);\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectUser={this.handleUserSelection}\n            userId={selectedUserId}\n            todos={todos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                user={this.findSelectedUser()}\n                clearUser={this.handleClearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}